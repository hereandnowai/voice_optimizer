
import React, { useState, useCallback } from 'react';
import { Input } from '../../common/Input.tsx';
import { Button } from '../../common/Button.tsx';
import { LoadingSpinner } from '../../common/LoadingSpinner.tsx';
import { Card } from '../../common/Card.tsx';
import { Alert } from '../../common/Alert.tsx';
import { generateContentBrief } from '../../../services/geminiService.ts';
import { ContentBrief } from '../../../types.ts';
import { BRAND_CONFIG } from '../../../constants.ts';
import { downloadFile, getCurrentDateString, getTimestampFilenameSuffix } from '../../../utils.ts';
import { DownloadIcon } from '../../common/Icons.tsx';

export const BriefGeneratorPage: React.FC = () => {
  const [topic, setTopic] = useState<string>('');
  const [brief, setBrief] = useState<ContentBrief | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = useCallback(async () => {
    if (!topic.trim()) {
      setError("Please enter a topic for the content brief.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setBrief(null);
    try {
      const result = await generateContentBrief(topic);
      if (result) {
        setBrief(result);
      } else {
        setError("Failed to generate content brief. The AI might have returned an unexpected format.");
      }
    } catch (err)
     {
      console.error(err);
      setError("An error occurred while generating the brief. Please ensure your API key is correctly configured and try again.");
    } finally {
      setIsLoading(false);
    }
  }, [topic]);

  const handleDownloadResults = () => {
    if (!brief) return;

    let fileContent = `Voice-Search Optimized Content Brief\n`;
    fileContent += `Date: ${getCurrentDateString()}\n`;
    fileContent += `Topic: ${topic}\n\n`;

    fileContent += `Suggested H1 Title:\n${brief.titleSuggestion}\n\n`;

    if (brief.headings && brief.headings.length > 0) {
      fileContent += `Suggested Subheadings (H2, H3):\n`;
      brief.headings.forEach(heading => {
        fileContent += `- ${heading}\n`;
      });
      fileContent += `\n`;
    }

    if (brief.keyQuestions && brief.keyQuestions.length > 0) {
      fileContent += `Key Questions to Answer:\n`;
      brief.keyQuestions.forEach(question => {
        fileContent += `- ${question}\n`;
      });
      fileContent += `\n`;
    }
            
    if (brief.keywordClusters && brief.keywordClusters.length > 0) {
      fileContent += `Keyword Clusters/Related Keywords:\n`;
      brief.keywordClusters.forEach(keyword => {
        fileContent += `- ${keyword}\n`;
      });
      fileContent += `\n`;
    }

    if (brief.schemaSuggestions && brief.schemaSuggestions.length > 0) {
      fileContent += `Schema Markup Suggestions:\n`;
      brief.schemaSuggestions.forEach(schema => {
        fileContent += `- ${schema}\n`;
      });
      fileContent += `\n`;
    }
    
    fileContent += `\nReport generated by ${BRAND_CONFIG.brand.shortName} - ${BRAND_CONFIG.brand.slogan}`;

    const filename = `content-brief-${getTimestampFilenameSuffix()}.txt`;
    downloadFile(fileContent, filename);
  };

  return (
    <div className="space-y-8">
      <Card title="Voice-Search Optimized Content Brief Generator" className="bg-white">
        <p className="mb-4 text-gray-600">
          Enter a topic for your new content. Our AI will generate a voice-search optimized outline with suggested questions, subheadings, keywords, and schema tags.
        </p>
        <Input
          label="Topic / Main Keywords"
          id="topic-input"
          value={topic}
          onChange={(e) => setTopic(e.target.value)}
          placeholder="e.g., benefits of meditation, best budget smartphones 2024"
          disabled={isLoading}
        />
        <Button onClick={handleSubmit} isLoading={isLoading} disabled={isLoading || !topic.trim()} className="mt-4 bg-[#FFDF00] text-[#004040] hover:bg-yellow-400">
          Generate Content Brief
        </Button>
      </Card>

      {isLoading && <LoadingSpinner />}
      {error && <Alert type="error" message={error} className="my-4" />}
      
      {brief && (
        <Card title="Generated Content Brief" className="bg-white">
          <div className="space-y-6">
            <div>
              <h4 className="font-semibold text-lg text-[#004040]">Suggested H1 Title:</h4>
              <p className="text-gray-700 text-xl py-2">{brief.titleSuggestion}</p>
            </div>

            {brief.headings && brief.headings.length > 0 && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Suggested Subheadings (H2, H3):</h4>
                <ul className="list-disc list-inside text-gray-700 space-y-1 bg-gray-50 p-3 rounded-md">
                  {brief.headings.map((heading, index) => <li key={index}>{heading}</li>)}
                </ul>
              </div>
            )}

            {brief.keyQuestions && brief.keyQuestions.length > 0 && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Key Questions to Answer:</h4>
                <ul className="list-disc list-inside text-gray-700 space-y-1 bg-gray-50 p-3 rounded-md">
                  {brief.keyQuestions.map((question, index) => <li key={index}>{question}</li>)}
                </ul>
              </div>
            )}
            
            {brief.keywordClusters && brief.keywordClusters.length > 0 && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Keyword Clusters/Related Keywords:</h4>
                <div className="flex flex-wrap gap-2">
                  {brief.keywordClusters.map((keyword, index) => (
                    <span key={index} className="bg-[#FFDF00] text-[#004040] px-3 py-1 rounded-full text-sm shadow">
                      {keyword}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {brief.schemaSuggestions && brief.schemaSuggestions.length > 0 && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Schema Markup Suggestions:</h4>
                 <div className="flex flex-wrap gap-2">
                  {brief.schemaSuggestions.map((schema, index) => (
                     <span key={index} className="bg-teal-100 text-[#004040] px-3 py-1 rounded-full text-sm border border-teal-300">
                      {schema}
                    </span>
                  ))}
                </div>
              </div>
            )}
             <div className="mt-6 flex justify-end">
                <Button onClick={handleDownloadResults} variant="outline" className="text-[#004040] border-[#004040] hover:bg-gray-100">
                    <DownloadIcon className="w-5 h-5 mr-2" />
                    Download Brief
                </Button>
            </div>
          </div>
        </Card>
      )}
       <div className="mt-8 p-4 border-t border-gray-200 text-center">
            <img src={BRAND_CONFIG.brand.chatbot.avatar} alt="Chatbot Avatar" className="w-16 h-16 rounded-full mx-auto mb-2 shadow-lg"/>
            <p className="text-sm text-gray-600">Brief generated by {BRAND_CONFIG.brand.shortName}. {BRAND_CONFIG.brand.slogan}.</p>
        </div>
    </div>
  );
};