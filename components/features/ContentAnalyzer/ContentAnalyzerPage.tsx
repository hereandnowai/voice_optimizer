
import React, { useState, useCallback } from 'react';
import { TextArea } from '../../common/TextArea.tsx';
import { Button } from '../../common/Button.tsx';
import { LoadingSpinner } from '../../common/LoadingSpinner.tsx';
import { Card } from '../../common/Card.tsx';
import { Alert } from '../../common/Alert.tsx';
import { analyzeContent } from '../../../services/geminiService.ts';
import { AnalysisResults } from '../../../types.ts';
import { BRAND_CONFIG } from '../../../constants.ts';
import { downloadFile, getCurrentDateString, getTimestampFilenameSuffix } from '../../../utils.ts';
import { DownloadIcon } from '../../common/Icons.tsx';

export const ContentAnalyzerPage: React.FC = () => {
  const [inputText, setInputText] = useState<string>('');
  const [results, setResults] = useState<AnalysisResults | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = useCallback(async () => {
    if (!inputText.trim()) {
      setError("Please enter some text or a URL to analyze.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setResults(null);
    try {
      const analysis = await analyzeContent(inputText);
      if (analysis) {
        setResults(analysis);
      } else {
        setError("Failed to get analysis results. The AI might have returned an unexpected format.");
      }
    } catch (err) {
      console.error(err);
      setError("An error occurred while analyzing the content. Please ensure your API key is correctly configured and try again.");
    } finally {
      setIsLoading(false);
    }
  }, [inputText]);

  const handleDownloadResults = () => {
    if (!results) return;

    let fileContent = `Voice Search Content Analysis\n`;
    fileContent += `Date: ${getCurrentDateString()}\n`;
    fileContent += `Input Text (first 100 chars): ${inputText.substring(0,100)}...\n\n`;

    fileContent += `Readability:\n${results.readability}\n\n`;
    fileContent += `Tone:\n${results.tone}\n\n`;
    fileContent += `Structure:\n${results.structure}\n\n`;

    if (results.issues && results.issues.length > 0) {
      fileContent += `Identified Issues:\n`;
      results.issues.forEach(issue => {
        fileContent += `- ${issue}\n`;
      });
      fileContent += `\n`;
    }

    if (results.suggestions && results.suggestions.length > 0) {
      fileContent += `Suggestions for Voice Search:\n`;
      results.suggestions.forEach(suggestion => {
        fileContent += `- ${suggestion}\n`;
      });
      fileContent += `\n`;
    }
    
    fileContent += `\nReport generated by ${BRAND_CONFIG.brand.shortName} - ${BRAND_CONFIG.brand.slogan}`;

    const filename = `content-analysis-${getTimestampFilenameSuffix()}.txt`;
    downloadFile(fileContent, filename);
  };

  return (
    <div className="space-y-8">
      <Card title="Voice Search Content Analyzer" className="bg-white">
        <p className="mb-4 text-gray-600">
          Paste your website/blog content or plain text below. Our AI will analyze its readability, tone, structure, and voice-search friendliness.
        </p>
        <TextArea
          label="Enter Content or URL"
          id="content-input"
          value={inputText}
          onChange={(e) => setInputText(e.target.value)}
          placeholder="Paste your content here..."
          rows={10}
          disabled={isLoading}
        />
        <Button onClick={handleSubmit} isLoading={isLoading} disabled={isLoading || !inputText.trim()} className="mt-4 bg-[#FFDF00] text-[#004040] hover:bg-yellow-400">
          Analyze Content
        </Button>
      </Card>

      {isLoading && <LoadingSpinner />}
      {error && <Alert type="error" message={error} className="my-4" />}
      
      {results && (
        <Card title="Analysis Results" className="bg-white">
          <div className="space-y-6">
            <div>
              <h4 className="font-semibold text-lg text-[#004040]">Readability:</h4>
              <p className="text-gray-700 whitespace-pre-wrap">{results.readability}</p>
            </div>
            <div>
              <h4 className="font-semibold text-lg text-[#004040]">Tone:</h4>
              <p className="text-gray-700 whitespace-pre-wrap">{results.tone}</p>
            </div>
            <div>
              <h4 className="font-semibold text-lg text-[#004040]">Structure:</h4>
              <p className="text-gray-700 whitespace-pre-wrap">{results.structure}</p>
            </div>
            {results.issues && results.issues.length > 0 && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Identified Issues:</h4>
                <ul className="list-disc list-inside text-gray-700 space-y-1">
                  {results.issues.map((issue, index) => <li key={index}>{issue}</li>)}
                </ul>
              </div>
            )}
            {results.suggestions && results.suggestions.length > 0 && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Suggestions for Voice Search:</h4>
                <ul className="list-disc list-inside text-gray-700 space-y-1">
                  {results.suggestions.map((suggestion, index) => <li key={index}>{suggestion}</li>)}
                </ul>
              </div>
            )}
             <div className="mt-6 flex justify-end">
              <Button onClick={handleDownloadResults} variant="outline" className="text-[#004040] border-[#004040] hover:bg-gray-100">
                <DownloadIcon className="w-5 h-5 mr-2" />
                Download Results
              </Button>
            </div>
          </div>
        </Card>
      )}
       <div className="mt-8 p-4 border-t border-gray-200 text-center">
            <img src={BRAND_CONFIG.brand.chatbot.avatar} alt="Chatbot Avatar" className="w-16 h-16 rounded-full mx-auto mb-2 shadow-lg"/>
            <p className="text-sm text-gray-600">Analysis powered by {BRAND_CONFIG.brand.shortName}. {BRAND_CONFIG.brand.slogan}.</p>
        </div>
    </div>
  );
};