
import React, { useState, useCallback } from 'react';
import { TextArea } from '../../common/TextArea.tsx';
import { Button } from '../../common/Button.tsx';
import { LoadingSpinner } from '../../common/LoadingSpinner.tsx';
import { Card } from '../../common/Card.tsx';
import { Alert } from '../../common/Alert.tsx';
import { optimizeSeoContent } from '../../../services/geminiService.ts';
import { OptimizationSuggestions } from '../../../types.ts';
import { BRAND_CONFIG } from '../../../constants.ts';
import { downloadFile, getCurrentDateString, getTimestampFilenameSuffix } from '../../../utils.ts';
import { DownloadIcon } from '../../common/Icons.tsx';

export const SeoOptimizerPage: React.FC = () => {
  const [content, setContent] = useState<string>('');
  const [suggestions, setSuggestions] = useState<OptimizationSuggestions | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = useCallback(async () => {
    if (!content.trim()) {
      setError("Please enter content to optimize.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setSuggestions(null);
    try {
      const result = await optimizeSeoContent(content);
      if (result) {
        setSuggestions(result);
      } else {
         setError("Failed to get optimization suggestions. The AI might have returned an unexpected format.");
      }
    } catch (err) {
      console.error(err);
      setError("An error occurred while optimizing content. Please ensure your API key is correctly configured and try again.");
    } finally {
      setIsLoading(false);
    }
  }, [content]);

  const handleDownloadResults = () => {
    if (!suggestions) return;

    let fileContent = `AI Voice SEO Optimization Report\n`;
    fileContent += `Date: ${getCurrentDateString()}\n`;
    fileContent += `Original Content (first 100 chars): ${content.substring(0,100)}...\n\n`;
    
    fileContent += `Audit Summary:\n${suggestions.auditSummary}\n\n`;

    if (suggestions.recommendations && suggestions.recommendations.length > 0) {
      fileContent += `Recommendations:\n`;
      suggestions.recommendations.forEach(rec => {
        fileContent += `- ${rec}\n`;
      });
      fileContent += `\n`;
    }

    if (suggestions.qnaFormattedContent) {
      fileContent += `Q&A / FAQ Formatted Content:\n${suggestions.qnaFormattedContent}\n\n`;
    }
    
    if (suggestions.snippetHighlights && suggestions.snippetHighlights.length > 0) {
      fileContent += `Potential Voice Snippets:\n`;
      suggestions.snippetHighlights.forEach(snippet => {
        fileContent += `- ${snippet}\n`;
      });
      fileContent += `\n`;
    }
    
    fileContent += `\nReport generated by ${BRAND_CONFIG.brand.shortName} - ${BRAND_CONFIG.brand.slogan}`;
    
    const filename = `seo-optimization-report-${getTimestampFilenameSuffix()}.txt`;
    downloadFile(fileContent, filename);
  };

  return (
    <div className="space-y-8">
      <Card title="AI Voice SEO Optimizer" className="bg-white">
        <p className="mb-4 text-gray-600">
          Paste your existing content. Our AI will audit it and recommend changes to improve voice SEO, check for featured snippet eligibility, and restructure paragraphs into Q&A format.
        </p>
        <TextArea
          label="Your Existing Content"
          id="seo-content-input"
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="Paste your article or blog post here..."
          rows={12}
          disabled={isLoading}
        />
        <Button onClick={handleSubmit} isLoading={isLoading} disabled={isLoading || !content.trim()} className="mt-4 bg-[#FFDF00] text-[#004040] hover:bg-yellow-400">
          Optimize Content
        </Button>
      </Card>

      {isLoading && <LoadingSpinner />}
      {error && <Alert type="error" message={error} className="my-4" />}
      
      {suggestions && (
        <Card title="Optimization Suggestions" className="bg-white">
          <div className="space-y-6">
            <div>
              <h4 className="font-semibold text-lg text-[#004040]">Audit Summary:</h4>
              <p className="text-gray-700 whitespace-pre-wrap">{suggestions.auditSummary}</p>
            </div>

            {suggestions.recommendations && suggestions.recommendations.length > 0 && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Recommendations:</h4>
                <ul className="list-disc list-inside text-gray-700 space-y-1">
                  {suggestions.recommendations.map((rec, index) => <li key={index}>{rec}</li>)}
                </ul>
              </div>
            )}

            {suggestions.qnaFormattedContent && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Q&A / FAQ Formatted Content:</h4>
                <div className="bg-gray-50 p-4 rounded-md text-gray-700 whitespace-pre-wrap">
                  {suggestions.qnaFormattedContent}
                </div>
              </div>
            )}
            
            {suggestions.snippetHighlights && suggestions.snippetHighlights.length > 0 && (
              <div>
                <h4 className="font-semibold text-lg text-[#004040]">Potential Voice Snippets:</h4>
                <ul className="list-disc list-inside text-gray-700 space-y-1">
                  {suggestions.snippetHighlights.map((snippet, index) => <li key={index}>{snippet}</li>)}
                </ul>
              </div>
            )}
            <div className="mt-6 flex justify-end">
              <Button onClick={handleDownloadResults} variant="outline" className="text-[#004040] border-[#004040] hover:bg-gray-100">
                <DownloadIcon className="w-5 h-5 mr-2" />
                Download Suggestions
              </Button>
            </div>
          </div>
        </Card>
      )}
       <div className="mt-8 p-4 border-t border-gray-200 text-center">
            <img src={BRAND_CONFIG.brand.chatbot.avatar} alt="Chatbot Avatar" className="w-16 h-16 rounded-full mx-auto mb-2 shadow-lg"/>
            <p className="text-sm text-gray-600">Optimization powered by {BRAND_CONFIG.brand.shortName}. {BRAND_CONFIG.brand.slogan}.</p>
        </div>
    </div>
  );
};