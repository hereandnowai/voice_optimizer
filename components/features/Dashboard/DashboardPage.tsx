
import React, { useState, useEffect, useCallback } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';
import { Card } from '../../common/Card.tsx';
import { TextArea } from '../../common/TextArea.tsx';
import { Button } from '../../common/Button.tsx';
import { LoadingSpinner } from '../../common/LoadingSpinner.tsx';
import { Alert } from '../../common/Alert.tsx';
import { DashboardData } from '../../../types.ts';
import { BRAND_CONFIG } from '../../../constants.ts';
import { DashboardIcon, InfoIcon, DownloadIcon } from '../../common/Icons.tsx';
import { generateDashboardMetrics } from '../../../services/geminiService.ts';
import { downloadFile, getCurrentDateString, getTimestampFilenameSuffix } from '../../../utils.ts';

interface ScoreCardProps {
  title: string;
  value: string | number;
  unit?: string;
  icon?: React.ReactNode;
  colorClass?: string;
  description?: string;
}

const ScoreCard: React.FC<ScoreCardProps> = ({ title, value, unit, icon, colorClass = 'text-[#004040]', description }) => (
  <Card className="flex-1 min-w-[200px] shadow-lg hover:shadow-xl transition-shadow bg-white">
    <div className="flex items-center justify-between mb-2">
      <h4 className={`text-md font-semibold ${colorClass}`}>{title}</h4>
      {icon && <span className={`${colorClass} opacity-70`}>{icon}</span>}
    </div>
    <p className="text-3xl font-bold text-gray-800">
      {value}
      {unit && <span className="text-lg font-normal ml-1">{unit}</span>}
    </p>
    {description && <p className="text-xs text-gray-500 mt-1">{description}</p>}
  </Card>
);

const initialDashboardData: DashboardData = {
  optimizationPercentage: 0,
  readabilityScore: 0,
  snippetPotential: 0,
  keywordRankingScore: 0,
};


export const DashboardPage: React.FC = () => {
  const [contentInput, setContentInput] = useState<string>('');
  const [dashboardData, setDashboardData] = useState<DashboardData>(initialDashboardData);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [chartData, setChartData] = useState<any[]>([]);

  useEffect(() => {
    setChartData([
      { name: 'Optimization', score: dashboardData.optimizationPercentage, fill: BRAND_CONFIG.brand.colors.primary },
      { name: 'Readability', score: dashboardData.readabilityScore, fill: '#82ca9d' },
      { name: 'Snippet Potential', score: dashboardData.snippetPotential, fill: '#8884d8' },
      { name: 'Keyword Rank Score', score: dashboardData.keywordRankingScore, fill: '#ffc658' },
    ]);
  }, [dashboardData]);

  const handleCalculateMetrics = useCallback(async () => {
    if (!contentInput.trim()) {
      setError("Please enter some content to analyze for metrics.");
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const result = await generateDashboardMetrics(contentInput);
      if (result) {
        setDashboardData(result);
      } else {
        setError("Failed to generate metrics. The AI might have returned an unexpected format. Please try again.");
        setDashboardData(initialDashboardData); // Reset to initial on failure
      }
    } catch (err) {
      console.error(err);
      setError("An error occurred while calculating metrics. Please ensure your API key is correctly configured and try again.");
      setDashboardData(initialDashboardData); // Reset to initial on error
    } finally {
      setIsLoading(false);
    }
  }, [contentInput]);

  const handleDownloadResults = () => {
    if (!dashboardData || dashboardData.optimizationPercentage === 0 && dashboardData.readabilityScore === 0) return; // Basic check if data is loaded

    let fileContent = `SEO & Voice Metrics Report\n`;
    fileContent += `Date: ${getCurrentDateString()}\n`;
    fileContent += `Analyzed Content Snippet (first 100 chars): ${contentInput.substring(0,100)}...\n\n`;

    fileContent += `Overall Optimization: ${dashboardData.optimizationPercentage}%\n`;
    fileContent += `Readability Score: ${dashboardData.readabilityScore}/100\n`;
    fileContent += `Snippet Potential: ${dashboardData.snippetPotential}%\n`;
    fileContent += `Keyword Voice Rank Score: ${dashboardData.keywordRankingScore}/100\n\n`;
    
    fileContent += `Chart Data:\n`;
    chartData.forEach(item => {
        fileContent += `- ${item.name}: ${item.score}\n`;
    });
    
    fileContent += `\nReport generated by ${BRAND_CONFIG.brand.shortName} - ${BRAND_CONFIG.brand.slogan}`;

    const filename = `voice-metrics-report-${getTimestampFilenameSuffix()}.txt`;
    downloadFile(fileContent, filename);
  };

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold text-[#004040]">SEO & Voice Metrics Dashboard</h2>
        <img src={BRAND_CONFIG.brand.chatbot.face} alt="Chatbot Face" className="w-20 h-20 rounded-full shadow-md border-2 border-[#FFDF00]" />
      </div>
      
      <Card title="Analyze Content for Metrics" className="bg-white">
        <p className="mb-4 text-gray-600">
          Paste your content below. Our AI will analyze it and provide estimated SEO & Voice metrics.
        </p>
        <TextArea
          label="Enter Your Content Here"
          id="metrics-content-input"
          value={contentInput}
          onChange={(e) => setContentInput(e.target.value)}
          placeholder="Paste your article, blog post, or any text content..."
          rows={8}
          disabled={isLoading}
        />
        <Button 
            onClick={handleCalculateMetrics} 
            isLoading={isLoading} 
            disabled={isLoading || !contentInput.trim()} 
            className="mt-4 bg-[#FFDF00] text-[#004040] hover:bg-yellow-400"
        >
          Calculate Metrics
        </Button>
      </Card>

      {isLoading && <LoadingSpinner />}
      {error && <Alert type="error" message={error} className="my-4" />}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <ScoreCard 
            title="Overall Optimization" 
            value={dashboardData.optimizationPercentage} 
            unit="%" 
            icon={<DashboardIcon className="w-6 h-6"/>} 
            colorClass="text-[#004040]"
            description="Content optimized for voice"
        />
        <ScoreCard 
            title="Readability Score" 
            value={dashboardData.readabilityScore} 
            unit="/100" 
            icon={<InfoIcon className="w-6 h-6 text-green-500" />}
            colorClass="text-green-600"
            description="Ease of understanding"
        />
        <ScoreCard 
            title="Snippet Potential" 
            value={dashboardData.snippetPotential} 
            unit="%" 
            icon={<InfoIcon className="w-6 h-6 text-purple-500" />}
            colorClass="text-purple-600"
            description="Likelihood for featured snippets"
        />
        <ScoreCard 
            title="Keyword Voice Rank" 
            value={dashboardData.keywordRankingScore} 
            unit="/100" 
            icon={<InfoIcon className="w-6 h-6 text-orange-500" />}
            colorClass="text-orange-600"
            description="Est. voice search strength"
        />
      </div>

      <Card title="Performance Overview" className="bg-white">
        {dashboardData.optimizationPercentage === 0 && dashboardData.readabilityScore === 0 && !isLoading && !error && (
            <p className="text-gray-500 text-center py-10">Enter content above and click "Calculate Metrics" to see the performance overview chart.</p>
        )}
        {(dashboardData.optimizationPercentage > 0 || dashboardData.readabilityScore > 0 || isLoading) && (
            <div style={{ width: '100%', height: 400 }}>
            <ResponsiveContainer>
                <BarChart
                data={chartData}
                margin={{
                    top: 20, right: 30, left: 0, bottom: 5,
                }}
                >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip
                    contentStyle={{ backgroundColor: 'rgba(255, 255, 255, 0.9)', borderRadius: '0.5rem', borderColor: '#004040' }}
                    itemStyle={{ color: '#004040' }}
                    cursor={{fill: 'rgba(255, 223, 0, 0.2)'}}
                />
                <Legend />
                <Bar dataKey="score" name="Performance Score">
                    {chartData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.fill} />
                    ))}
                </Bar>
                </BarChart>
            </ResponsiveContainer>
            </div>
        )}
         {dashboardData.optimizationPercentage > 0 && dashboardData.readabilityScore > 0 && !isLoading && (
            <div className="mt-6 flex justify-end">
                <Button onClick={handleDownloadResults} variant="outline" className="text-[#004040] border-[#004040] hover:bg-gray-100">
                    <DownloadIcon className="w-5 h-5 mr-2" />
                    Download Metrics Report
                </Button>
            </div>
        )}
      </Card>
      <div className="mt-8 p-4 border-t border-gray-200 text-center">
            <p className="text-sm text-gray-600">Dashboard insights powered by {BRAND_CONFIG.brand.shortName}. {BRAND_CONFIG.brand.slogan}.</p>
        </div>
    </div>
  );
};
