
import React, { useState, useCallback } from 'react';
import { Input } from '../../common/Input.tsx';
import { TextArea } from '../../common/TextArea.tsx';
import { Button } from '../../common/Button.tsx';
import { LoadingSpinner } from '../../common/LoadingSpinner.tsx';
import { Card } from '../../common/Card.tsx';
import { Alert } from '../../common/Alert.tsx';
import { simulateVoiceCommand } from '../../../services/geminiService.ts';
import { SimulationResult } from '../../../types.ts';
import { BRAND_CONFIG } from '../../../constants.ts';
import { downloadFile, getCurrentDateString, getTimestampFilenameSuffix } from '../../../utils.ts';
import { DownloadIcon } from '../../common/Icons.tsx';

export const CommandSimulatorPage: React.FC = () => {
  const [query, setQuery] = useState<string>('');
  const [currentContent, setCurrentContent] = useState<string>('');
  const [optimizedContent, setOptimizedContent] = useState<string>('');
  const [simulation, setSimulation] = useState<SimulationResult | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = useCallback(async () => {
    if (!query.trim() || !currentContent.trim() || !optimizedContent.trim()) {
      setError("Please fill in all fields: voice query, current content, and optimized content.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setSimulation(null);
    try {
      const result = await simulateVoiceCommand(query, currentContent, optimizedContent);
      if (result) {
        setSimulation(result);
      } else {
        setError("Failed to get simulation results. The AI might have returned an unexpected format.");
      }
    } catch (err) {
      console.error(err);
      setError("An error occurred during simulation. Please ensure your API key is correctly configured and try again.");
    } finally {
      setIsLoading(false);
    }
  }, [query, currentContent, optimizedContent]);

  const handleDownloadResults = () => {
    if (!simulation) return;

    let fileContent = `Voice Command Simulation Results\n`;
    fileContent += `Date: ${getCurrentDateString()}\n`;
    fileContent += `Simulated Query: ${simulation.query}\n\n`;
    
    fileContent += `--- Analysis of Current Content ---\n`;
    fileContent += `${simulation.currentContentAnalysis}\n\n`;
    
    fileContent += `--- Analysis of Optimized Content ---\n`;
    fileContent += `${simulation.optimizedContentAnalysis}\n\n`;
    
    fileContent += `\nReport generated by ${BRAND_CONFIG.brand.shortName} - ${BRAND_CONFIG.brand.slogan}`;

    const filename = `voice-command-simulation-${getTimestampFilenameSuffix()}.txt`;
    downloadFile(fileContent, filename);
  };

  return (
    <div className="space-y-8">
      <Card title="Voice Command Simulator" className="bg-white">
        <p className="mb-4 text-gray-600">
          Simulate a voice query and see how your current content might perform compared to an optimized version. Our AI will predict the likelihood of providing a good voice answer.
        </p>
        <Input
          label="Simulated Voice Query (e.g., 'Hey Google, how do I bake a cake?')"
          id="voice-query"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Enter the voice query"
          disabled={isLoading}
          containerClassName="mb-6"
        />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <TextArea
            label="Your Current Content"
            id="current-content"
            value={currentContent}
            onChange={(e) => setCurrentContent(e.target.value)}
            placeholder="Paste your current content here"
            rows={8}
            disabled={isLoading}
          />
          <TextArea
            label="Your Optimized Content"
            id="optimized-content"
            value={optimizedContent}
            onChange={(e) => setOptimizedContent(e.target.value)}
            placeholder="Paste your voice-optimized content here"
            rows={8}
            disabled={isLoading}
          />
        </div>
        <Button 
          onClick={handleSubmit} 
          isLoading={isLoading} 
          disabled={isLoading || !query.trim() || !currentContent.trim() || !optimizedContent.trim()} 
          className="mt-6 bg-[#FFDF00] text-[#004040] hover:bg-yellow-400"
        >
          Simulate Command
        </Button>
      </Card>

      {isLoading && <LoadingSpinner />}
      {error && <Alert type="error" message={error} className="my-4" />}
      
      {simulation && (
        <Card title={`Simulation Results for: "${simulation.query}"`} className="bg-white">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold text-lg text-[#004040] mb-2">Analysis of Current Content:</h4>
              <p className="text-gray-700 bg-gray-50 p-3 rounded-md whitespace-pre-wrap">{simulation.currentContentAnalysis}</p>
            </div>
            <div>
              <h4 className="font-semibold text-lg text-[#004040] mb-2">Analysis of Optimized Content:</h4>
              <p className="text-gray-700 bg-green-50 p-3 rounded-md whitespace-pre-wrap">{simulation.optimizedContentAnalysis}</p>
            </div>
          </div>
           <div className="mt-6 flex justify-end">
            <Button onClick={handleDownloadResults} variant="outline" className="text-[#004040] border-[#004040] hover:bg-gray-100">
              <DownloadIcon className="w-5 h-5 mr-2" />
              Download Simulation
            </Button>
          </div>
        </Card>
      )}
       <div className="mt-8 p-4 border-t border-gray-200 text-center">
            <img src={BRAND_CONFIG.brand.chatbot.avatar} alt="Chatbot Avatar" className="w-16 h-16 rounded-full mx-auto mb-2 shadow-lg"/>
            <p className="text-sm text-gray-600">Simulation powered by {BRAND_CONFIG.brand.shortName}. {BRAND_CONFIG.brand.slogan}.</p>
        </div>
    </div>
  );
};